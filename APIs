set interactiveMode = false.

 param N.
 param N1.
 param N2.
 param N3.
 param qCK.
 param qCKP.
 param qK.
 param qKP.
 param qWK.
 param qMK.
 param qSSK.
 param qDel.
 param qD.
 param qSE.
 param qSD.
 param qPE.
 param qPD.
 param qW.
 param qUW.
 param qSS.
 param qSV.
 param qPS.
 param qPV.

  (* SENC *)
 type keyseed [large,fixed].
 type key [bounded].
 type cleartext [bounded].
 type ciphertext.
 type seed [fixed].
 proba Penc.
 proba Pencctxt.
 expand IND_CPA_INT_CTXT_sym_enc(keyseed,key,cleartext,ciphertext,seed,kgen,senc,sdec,injbot,Z,Penc,Pencctxt).

 (* PENC *)
 type pkey [bounded].
 type skey [bounded].
 type pcleartext [bounded].
 type pciphertext.
 type pseed [fixed].
 proba pPenc.
 proba Penccoll.
 expand IND_CCA2_public_key_enc(keyseed,pkey,skey,pcleartext,pciphertext,pseed,skgen,pkgen,penc,pdec,pinjbot,PZ,pPenc,Penccoll). 

  (* WRAP *)
 type wkey [fixed].
 type wseed [fixed].
 type wmkey [bounded].
 type wrap.
 type label [bounded].
 proba wPenc.
 proba wPmac.
 expand IND_CPA_sym_enc(keyseed,wkey,keyseed,wrap,wseed,wkgen,wenc,wdec,winjbot,WZ,wPenc).
 expand SUF_CMA_mac(keyseed,wmkey,wrap,label,wmkgen,wmac,wcheck,wPmac). 

  (* SAUTH *)
 type mkey [bounded].
 type macinput.
 type macres [bounded].
 proba Pmac.
 expand SUF_CMA_mac(keyseed,mkey,macinput,macres,mkgen,symmac,symverify,Pmac).

 (* PAUTH *)
 type spkey [bounded].
 type sskey [bounded].
 type signinput.
 type signature [bounded].
 type sseed [fixed].
 proba Psign.
 proba Psigncoll.
 expand SUF_CMA_signature(keyseed,spkey,sskey,signinput,signature,sseed,sskgen,spkgen,asymsign,asymverify,Psign,Psigncoll).

 (* key type *)

 type keytype [large].
 const symkey: keytype.
 const asymkey: keytype.
 const wrapkey: keytype.
 const mackey: keytype.
 const signkey: keytype.

 (* key handle *)

 type handle [fixed,large].
 table keystruct (handle, keytype, bool, keyseed, keyseed).

 (******************************** Semantic security **********************************)
 query secret1 b.
 event forge.
 query event forge ==> false.

 (******************************** API query **********************************)

 let CreateK =
     foreach iCK <= qCK do OCK(ktype:keytype):=
     if ktype = symkey then 
     (
     ks' <-R keyseed;
     k' <- kgen(ks'); 
     khd' <-R handle;
     insert keystruct(khd', symkey, true, ks', obfuscation);
     return (khd')
     ) 
     else
     if ktype = wrapkey then 
     (
     wks' <-R keyseed;
     wk' <- wkgen(wks');
     wmks' <-R keyseed;
     wmk' <- wmkgen(wmks');
     wkhd' <-R handle;
     insert keystruct(wkhd', wrapkey, true, wks', wmks');
     return (wkhd')
     )
     else
     if ktype = mackey then 
     (
     mks' <-R keyseed;
     mkhd' <-R handle;
     insert keystruct(mkhd', mackey, true, mks', obfuscation);
     return(mkhd')
     ).
     
 let CreateKP =
     foreach iCKP <= qCKP do OCKP(ktype:keytype):=
     if ktype = asymkey then 
     (
     pks' <-R keyseed;
     pk' <- pkgen(pks');
     sk' <- skgen(pks');
     skhd' <-R handle;
     insert keystruct(skhd', asymkey, true, pks', obfuscation);
     return (skhd',pk')
     )
     else
     if ktype = signkey then 
     (
     sks' <-R keyseed;
     spk' <- spkgen(sks');
     sigkhd' <-R handle;
     insert keystruct(sigkhd', signkey, true, sks', obfuscation);
     return(sigkhd',spk')
     ).
     
let CreateWrap=
     foreach iW <= qW do OW(wkhd3:handle, keyhd3:handle):=
     get keystruct(=wkhd3, =wrapkey, IsExtr, wks3, wmks3) in
     wk3 <- wkgen(wks3);
     wmk3 <- wmkgen(wmks3);
     wr3 <-R wseed;
     get keystruct(=keyhd3, ktype3, =true, kr3, =obfuscation) in
     w: wrap <- wenc(kr3,wk3,wr3);
     l: label <- wmac(w,wmk3);
     return((w,l)).
    
 
 let TPM2_Load=
     foreach iUW <= qUW do OUW(wkhd4:handle, (w':wrap,l':label)):=
     get keystruct(=wkhd4, =wrapkey, IsExtr, wks4, wmks4) in
     wk4 <- wkgen(wks4);
     wmk4 <- wmkgen(wmks4);
     if wcheck(w', wmk4, l') then
     let winjbot(kr4) = wdec(w', wk4) in
     get keystruct(keyhd4, ktype4, =true, =kr4, =obfuscation) in
     return(keyhd4).


 let TPM2_Encrypt =
     foreach iSE <= qSE do OSE(khd3:handle,m3:cleartext):=
     get keystruct(=khd3, =symkey, IsExtr, ks3, =obfuscation) in 
     k3 <- kgen(ks3);
     r3 <-R seed;
     return(senc(m3,k3,r3)) .
 
 let TPM2_Decrypt =
     foreach iSD <= qSD do OSD(khd4:handle,c4:ciphertext):=
     find u <= N suchthat defined(c1[u]) && (c4 = c1[u]) then end else
     get keystruct(=khd4, =symkey, IsExtr, ks4, =obfuscation) in
     k4 <- kgen(ks4);
     return(sdec(c4,k4)).

 let TPM2_RSA_Encrypt =
     foreach iPE <= qPE do OPE(skhd3:handle, pm3:pcleartext):=
     get keystruct(=skhd3, =asymkey, IsExtr, pks3, =obfuscation) in
     pk3 <- pkgen(pks3);
     pr3 <-R pseed;
     return(penc(pm3,pk3,pr3)).

 let TPM2_RSA_Decrypt =
     foreach iPD <= qPD do OPD(skhd4:handle, pc4:pciphertext):=
     find u <= N suchthat defined(pc1[u]) && (pc4 = pc1[u]) then end else
     get keystruct(=skhd4, =asymkey, IsExtr, pks4, =obfuscation) in
     sk4 <- skgen(pks4);
     return(pdec(pc4,sk4)).

 let TPM2_HMAC =
     foreach iSS <= qSS do OSS(mkhd3:handle, mm3:macinput):=
     get keystruct(=mkhd3, =mackey, IsExtr, mks3, =obfuscation) in
       mk3 <- mkgen(mks3);
       let mm3_mac = symmac(mm3, mk3) in
       return(mm3, mm3_mac).
 
 let TPM2_VerifyHMAC =
     foreach iSV <= qSV do OSV(mkhd4:handle, mm4:macinput, mm4_mac:macres):=
     get keystruct(=mkhd4, =mackey, IsExtr, mks4, =obfuscation) in
       mk4 <- mkgen(mks4);
       return(symverify(mm4,mk4,mm4_mac)).
    

 let TPM2_Sign =
     foreach iPS <= qPS do OPS(sigkhd3:handle, sm3:signinput):=
     get keystruct(=sigkhd3, =signkey, IsExtr, sks3, =obfuscation) in
     ssk3 <- sskgen(sks3);
     ss3 <-R sseed;
     let sm3_sign = asymsign(sm3, ssk3, ss3) in
     return (sm3,sm3_sign).

 let TPM2_VerifySignature =
     foreach iPV <= qPV do OPV(sigkhd4:handle, sm4:signinput, sm4_sign:signature):=
     get keystruct(=sigkhd4, =signkey, IsExtr, sks4, =obfuscation) in
     spk4 <- spkgen(sks4);
     return(asymverify(sm4,spk4,sm4_sign)).

 (******************************** security test **********************************)

 let testSENC=
     OT2(m1:cleartext,m2:cleartext) :=
     find uSE1 <= qSE suchthat defined(khd3[uSE1],m3[uSE1]) && (khd = khd3[uSE1]) && (m1 = m3[uSE1]) then end else
     find uSE2 <= qSE suchthat defined(khd3[uSE2],m3[uSE2]) && (khd = khd3[uSE2]) && (m2 = m3[uSE2]) then end else
     let m = if b then m1 else m2 in
     get keystruct (=khd, =symkey, IsExtr, ks1, =obfuscation) in
     k1 <- kgen(ks1);
     r1 <-R seed;
     let c1: ciphertext = senc(m,k1,r1) in
     return (c1).

 let testPENC=
     OT3(pm1:pcleartext,pm2:pcleartext) :=
     find uPE1 <= qPE suchthat defined(skhd3[uPE1],pm3[uPE1]) && (skhd = skhd3[uPE1]) && (pm1 = pm3[uPE1]) then end else
     find uPE2 <= qPE suchthat defined(skhd3[uPE2],pm3[uPE2]) && (skhd = skhd3[uPE2]) && (pm2 = pm3[uPE2]) then end else
     get keystruct(=skhd, =asymkey, IsExtr, pks1, =obfuscation) in
     let pm = if b then pm1 else pm2 in
     pk1 <- pkgen(pks1);
     pr1 <-R pseed;
     let pc1: pciphertext = penc(pm,pk1,pr1) in
     return (pc1).
 
 let testCreate =
     OT4(wkhd1:handle, (w1:wrap,l1:label)) :=
     if wkhd1 = wkhd then
     get keystruct (=wkhd1, =wrapkey, IsExtr, wks1, wmks1) in
     wk1 <- wkgen(wks1);
     wmk1 <- wmkgen(wmks1);
     if wcheck(w1, wmk1, l1) then
     let winjbot(kr1) = wdec(w1, wk1) in
     get keystruct(keyhd1, ktype1, =true, =kr1, =obfuscation) in (
     find uW <= qW suchthat defined(wkhd3[uW],keyhd3[uW]) && (wkhd = wkhd3[uW]) && (keyhd1 = keyhd3[uW]) then end else event forge
     )
     else event forge.

 let testHMAC =
     OT5 (mkhd2:handle, mm2:macinput, mm2_mac:macres) :=
     if mkhd2 = mkhd then
     get keystruct (=mkhd2, =mackey, IsExtr, mks2, =obfuscation) in
     mk2 <- mkgen(mks2);
     if symverify(mm2,mk2,mm2_mac) then
     find uSS <= qSS suchthat defined(mkhd3[uSS],mm3[uSS]) && (mkhd = mkhd3[uSS]) && (mm2 = mm3[uSS]) then end else
     event forge.

 let testSignature =
     OT6 (sigkhd2:handle, sm2:signinput, sm2_sign:signature) :=
     if sigkhd2 = sigkhd then
     get keystruct(=sigkhd2, =signkey, IsExtr, sks2, =obfuscation) in
     spk2 <- spkgen(sks2);
     if asymverify(sm2,spk2,sm2_sign) then
     find uPS <= qPS suchthat defined(sigkhd3[uPS],sm3[uPS]) && (sigkhd = sigkhd3[uPS]) && (sm2 = sm3[uPS]) then end else
     event forge.

 process
     Ogen() :=
     b <-R bool;
     obfuscation <-R keyseed;
     ks <-R keyseed;
     k <- kgen(ks);
     khd <-R handle;
     insert keystruct(khd, symkey, false, ks, obfuscation);
     pks <-R keyseed;
     sk <- skgen(pks);
     pk <- pkgen(pks);
     skhd <-R handle;
     insert keystruct(skhd, asymkey, false, pks, obfuscation);
     wks <-R keyseed;
     wk <- wkgen(wks);
     wmks <-R keyseed;
     wmk <- wmkgen(wmks); 
     wkhd <-R handle;
     insert keystruct(wkhd, wrapkey, false, wks, wmks);
     mks <-R keyseed;
     mk <- mkgen(mks);
     mkhd <-R handle;
     insert keystruct(mkhd, mackey, false, mks, obfuscation);
     sks <-R keyseed;
     spk <- spkgen(sks);
     ssk <- sskgen(sks);
     sigkhd <-R handle;
     insert keystruct(sigkhd, signkey, false, sks, obfuscation);
     return (pk, khd, skhd, wkhd, mkhd, spk, sigkhd);
     ( (foreach iA <= N do testSENC) | 
       (foreach iB <= N do testPENC) | 
       (foreach iC <= N do testCreate) |
       (foreach iD <= N do testHMAC) |
       (foreach iE <= N do testSignature) |
       CreateK | CreateKP | CreateWrap | TPM2_Load | TPM2_Encrypt | TPM2_Decrypt | TPM2_RSA_Encrypt | TPM2_RSA_Decrypt | TPM2_HMAC | TPM2_VerifyHMAC | TPM2_Sign | TPM2_VerifySignature )
